generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int            @id @default(autoincrement())
  username               String         @unique
  email                  String         @unique
  password               String
  bio                    String?        @db.VarChar(240)
  profilePic             String?
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  comments               Comment[]
  receivedFriendRequests Friendship[]   @relation("receivedRequest")
  sentFriendRequests     Friendship[]   @relation("sentRequest")
  likes                  Like[]
  notifications          Notification[]
  posts                  Post[]
}

model Friendship {
  id         Int              @id @default(autoincrement())
  status     FriendshipStatus @default(Pending)
  senderId   Int
  receiverId Int
  receiver   User             @relation("receivedRequest", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User             @relation("sentRequest", fields: [senderId], references: [id], onDelete: Cascade)
}

model Post {
  id        Int       @id @default(autoincrement())
  content   String    @db.VarChar(1000)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  authorID  Int
  image     String?
  comments  Comment[]
  likes     Like[]
  author    User      @relation(fields: [authorID], references: [id], onDelete: Cascade)
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String   @db.VarChar(1000)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorID  Int
  postID    Int
  author    User     @relation(fields: [authorID], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postID], references: [id], onDelete: Cascade)
  likes     Like[]
}

model Like {
  id        Int      @id @default(autoincrement())
  authorID  Int
  postID    Int?
  commentID Int?
  author    User     @relation(fields: [authorID], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentID], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postID], references: [id], onDelete: Cascade)
}

model Notification {
  id         Int      @id @default(autoincrement())
  receiverID Int
  senderID   Int
  contentID  Int
  createdAt  DateTime @default(now())
  read       Boolean  @default(false)
  senderName String?
  type       String?
  receiver   User     @relation(fields: [receiverID], references: [id])
}

enum FriendshipStatus {
  Accepted
  Declined
  Pending
  Blocked
}
